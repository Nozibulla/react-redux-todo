// import React, { Component } from 'react';

import React from 'react';
export default class CommentBox extends React.Component {
  static propTypes = {
    data: React.PropTypes.Array,
    pollInterval: React.PropTypes.number,
  };

  constructor(props) {
    super(props);
    this.handleCommentSubmit = this.handleCommentSubmit.bind(this);
    this.loadCommentsFromServer = this.loadCommentsFromServer.bind(this);
  }

  state = {
    data: [],
  }

  componentDidMount() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  }

  loadCommentsFromServer() {
    const fixedData = [
      { id: 1, author: 'Pete Hunt', text: 'This is one comment' },
      { id: 2, author: 'Jordan Walke', text: 'This is *another* comment' },
      { id: 3, author: 'Jordan Walke', text: 'This is *another* comment' }
    ];

    this.setState({ data: fixedData });
  }

  handleCommentSubmit(comment) {
    const comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    const newComments = comments.concat([comment]);
    this.setState({ data: newComments });
  }

  render() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} pollInterval={2000} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
}

class CommentList extends React.Component {
  static propTypes = {
    data: React.PropTypes.Array,
  };

  constructor(props) {
    super(props);
  }

  render() {
    const commentNodes = this.props.data.map((comment) => {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
}

class CommentForm extends React.Component {
  static propTypes = {
    onCommentSubmit: React.PropTypes.element.IsRequired,
  };

  constructor(props) {
    super(props);
    this.handleTextChange = this.handleTextChange.bind(this);
    this.handleAuthorChange = this.handleAuthorChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  state = {
    author: '',
    text: ''
  };

  handleTextChange(e) {
    this.setState({ text: e.target.value });
  }

  handleAuthorChange(e) {
    this.setState({ author: e.target.value });
  }

  handleSubmit(e) {
    e.preventDefault();
    const author = this.state.author.trim();
    const text = this.state.text.trim();
    if (!text || !author) {
      return;
    }

    this.props.onCommentSubmit({ author: author, text: text });
    // console.log(author, text);
    this.setState({ author: '', text: '' });
  }

  render() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input type="text" placeholder="Your name" value={this.state.author} onChange={this.handleAuthorChange} />
        <input type="text" placeholder="Say something..." value={this.state.text} onChange={this.handleTextChange} />
        <input type="submit" value="Post" />
      </form>
    );
  }
}

class Comment extends React.Component {
  static propTypes = {
    author: React.PropTypes.element.isRequired,
    children: React.PropTypes.element.isRequired,
  }
  render() {
    return (
      <div>
        <h2>{this.props.author}</h2>
        {this.props.children}
      </div>
    );
  }
}


// class LikeButton extends Component {
//   constructor() {
//     super();
//     this.state = {
//       liked: false
//     };
//     this.handleClick = this.handleClick.bind(this);
//   }
//   handleClick() {
//     this.setState({ liked: !this.state.liked });
//   }
//   render() {
//     const text = this.state.liked ? 'liked' : 'haven\'t liked';
//     return (
//       <div onClick={this.handleClick}>
//         <p className="like">You {text} this. Click to toggle.</p>
//         <div className="person">
//           <ul>
//             <li className="name">{text}</li>
//           </ul>
//         </div>
//       </div>
//     );
//   }
// }

// export default LikeButton;

/* import React, { Component } from 'react';

class TodoList extends Component {
  propTypes = {
    items: React.PropTypes.element.isRequired,
  }
  render() {
    function createItem(item) {
      return <li key={item.id}>{item.text}</li>;
    }
    return <ul>{this.props.items.map(createItem)}</ul>;
  }
}

class TodoApp extends Component {
  state = {
    items: [], text: ''
  }
  onChange = (e) => {
    this.setState({ text: e.target.value });
  }
  handleSubmit = (e) => {
    e.preventDefault();
    const nextItems = this.state.items.concat([{ text: this.state.text, id: Date.now() }]);
    const nextText = '';
    this.setState({ items: nextItems, text: nextText });
  }
  render() {
    return (
      <div>
        <h3>TODO</h3>
        <TodoList items={this.state.items} />
        <form onSubmit={this.handleSubmit}>
          <input onChange={this.onChange} value={this.state.text} />
          <button>{'Add #' + (this.state.items.length + 1)}</button>
        </form>
      </div>
    );
  }
}

export default TodoApp;*/
